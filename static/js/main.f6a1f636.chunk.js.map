{"version":3,"sources":["Board/Board.module.css","Shape/Shape.module.css","Header/Header.module.css","Bucket/Bucket.module.css","Board/Board.tsx","Shape/Shape.tsx","Shape/shapes.ts","Bucket/Bucket.tsx","Header/Header.tsx","Board/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Board","board","className","styles","map","tile","i","Square","squareId","highlighted","highlight","active","boardDividerH","boardDividerV","setNodeRef","useDroppable","id","toString","ref","classNames","square","Shape","props","useDraggable","shapeId","attributes","listeners","transform","style","CSS","Translate","wrapper","shape","structure","coordinates","ShapePart","part","left","top","structures","o","t","s","z","j","l","getRandomShapeTypes","n","keys","Object","a","length","Math","floor","random","shuffle","splice","getStructure","key","Bucket","shapeTypes","bucket","Header","score","header","title","shapeToTileCoordinates","center","shapeType","shapeCoordinates","x","y","getIndexFromCoords","clearHighlights","checkAndCompleteSets","completedTiles","completedRowTiles","row","complete","completedTile","push","completedRows","concat","completedColumnTiles","col","completedColumns","completedBoxTiles","boxCoordinates","getBoxCoordinates","completedBoxes","includesCoords","topLeftCoordinate","getCoordsFromIndex","index","coords","arr","coord","App","useState","bucketShapes","setBucketShapes","width","height","newBoard","createNewBoard","setBoard","setScore","removeShape","newShapes","filter","collisionDetection","closestCenter","onDragOver","event","overId","over","parseInt","highlightShape","onDragEnd","placedShape","placeShape","addScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6a1f636.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__P2TC8\",\"boardDividerV\":\"Board_boardDividerV__3FkoP\",\"boardDividerH\":\"Board_boardDividerH__2p96D\",\"square\":\"Board_square__3drT6\",\"highlight\":\"Board_highlight__7PRwH\",\"active\":\"Board_active__2Rzdu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Shape_wrapper__34CHm\",\"shape\":\"Shape_shape__1vnar\",\"part\":\"Shape_part__3YeO4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1m9KH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bucket\":\"Bucket_bucket__3Kvbt\"};","import styles from './Board.module.css'\nimport classNames from 'classnames'\nimport { useDroppable } from '@dnd-kit/core'\nimport { BoardTile } from './utils'\n\ninterface BoardProps {\n  board: Array<BoardTile>\n}\n\nexport default function Board({ board }: BoardProps) {\n  return (\n    <div className={styles.board}>\n      {board.map((tile, i) => <Square key={i} squareId={i} highlighted={tile.highlight} active={tile.active} />)}\n      <div className={styles.boardDividerH} />\n      <div className={styles.boardDividerV} />\n    </div>\n  )\n}\n\ninterface SquareProps {\n  squareId: number,\n  highlighted: boolean,\n  active: boolean\n}\n\nfunction Square({ squareId, highlighted, active }: SquareProps) {\n  const { setNodeRef } = useDroppable({ id: squareId.toString() })\n\n  return (\n    <div ref={setNodeRef} className={classNames(styles.square, highlighted && styles.highlight, active && styles.active)} data-square={squareId} />\n  )\n}","import styles from './Shape.module.css'\nimport { Structure } from './shapes'\nimport { useDraggable } from '@dnd-kit/core'\nimport { CSS } from '@dnd-kit/utilities'\n\ninterface ShapeProps {\n  shapeId: string,\n  structure: Structure\n}\n\nexport default function Shape(props: ShapeProps) {\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({ id: props.shapeId })\n\n  const style = {\n    transform: CSS.Translate.toString(transform)\n  }\n\n  return (\n    <div className={styles.wrapper} style={style} ref={setNodeRef} {...attributes} {...listeners}>\n      <div className={styles.shape}>\n        {props.structure.map((coordinates, i) => <ShapePart key={i} coordinates={coordinates} />)}\n      </div>\n    </div>\n  )\n}\n\ninterface ShapePartProps {\n  coordinates: [number, number]\n}\n\nfunction ShapePart({ coordinates }: ShapePartProps) {\n  return (\n    <div className={styles.part} style={{ left: coordinates[0] * 20 - 10, top: coordinates[1] * 20 - 10 }} />\n  )\n}","export type Structure = Array<[number, number]>\n\nconst structures: {[key: string]: Structure} = {\n  i: [ [0, 0], [0, -2], [0, -1], [0, 1] ] as Structure,\n  o: [ [0, 0], [1, 0], [0, 1], [1, 1] ] as Structure,\n  t: [ [0, 0], [-1, 0], [0, 1], [1, 0] ] as Structure,\n  s: [ [0, 0], [-1, 1], [0, 1], [1, 0] ] as Structure,\n  z: [ [0, 0], [-1, 0], [0, 1], [1, 1] ] as Structure,\n  j: [ [0, 0], [0, -1], [0, 1], [-1, 1] ] as Structure,\n  l: [ [0, 0], [0, -1], [0, 1], [1, 1] ] as Structure,\n}\n\nexport function getRandomShapeTypes(n: number): Array<string> {\n  let keys = Object.keys(structures)\n  shuffle(keys)\n\n  return keys.splice(0, n)\n}\n\nexport function getStructure(key: string) {\n  return structures[key]\n}\n\nfunction shuffle(a: Array<any>) {\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n\n  return a;\n}","import Shape from '../Shape/Shape'\nimport styles from './Bucket.module.css'\nimport { getStructure } from '../Shape/shapes'\n\ninterface BucketProps {\n  shapeTypes: Array<string>\n}\n\nexport default function Bucket({ shapeTypes }: BucketProps) {\n  return (\n    <div className={styles.bucket}>\n      {shapeTypes.map(getStructure).map((structure, i) => (\n        <Shape key={i} structure={structure} shapeId={shapeTypes[i]} />\n      ))}\n    </div>\n  )\n}","import styles from './Header.module.css'\n\ninterface HeaderProps {\n  score: number\n}\n\nexport default function Header({ score }: HeaderProps) {\n  return (\n    <header className={styles.header}>\n      <div className={styles.title}>Woodoku</div>\n      <div className={styles.score}>{score}</div>\n    </header>\n  )\n}","import { getStructure, Structure } from \"../Shape/shapes\"\n\nexport interface BoardTile {\n  coordinates: [number, number],\n  highlight: boolean,\n  active: boolean,\n}\n\nexport function createNewBoard(width: number, height: number): Array<BoardTile> {\n  let newBoard = [] as Array<BoardTile>\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      newBoard.push({\n        coordinates: [x, y],\n        highlight: false,\n        active: false\n      })\n    }\n  }\n\n  return newBoard\n}\n\nexport function highlightShape(board: Array<BoardTile>, shapeCoordinates: Array<[number, number]>): Array<BoardTile> {\n  return board.map(tile => ({\n    ...tile,\n    highlight: includesCoords(shapeCoordinates, tile.coordinates)\n  }))\n}\n\nexport function placeShape(board: Array<BoardTile>, shapeCoordinates: Array<[number, number]>): Array<BoardTile> {\n  return board.map(tile => ({\n    ...tile,\n    active: tile.active || includesCoords(shapeCoordinates, tile.coordinates)\n  }))\n}\n\nexport function shapeToTileCoordinates(board: Array<BoardTile>, center: [number, number], shapeType: string): Array<[number, number]> | null {\n  const structure = getStructure(shapeType) as Structure\n  const shapeCoordinates = structure.map(([x, y]) => [center[0] + x, center[1] + y]) as Array<[number, number]>\n\n  for (let i = 0; i < shapeCoordinates.length; i++) {\n    if (shapeCoordinates[i][0] >= 9\n      || shapeCoordinates[i][1] >= 9\n      || shapeCoordinates[i][0] < 0\n      || shapeCoordinates[i][1] < 0\n      || board[getIndexFromCoords(shapeCoordinates[i])].active\n    ) {\n      return null\n    }\n  }\n\n  return shapeCoordinates\n}\n\nexport function clearHighlights(board: Array<BoardTile>): Array<BoardTile> {\n  return board.map(tile => ({\n    ...tile,\n    highlight: false\n  }))\n}\n\nexport function checkAndCompleteSets(board: Array<BoardTile>): [Array<BoardTile>, number] {\n  let completedTiles = [] as Array<[number, number]>\n  let score = 0\n\n  // Check rows\n  const completedRowTiles = completedRows(board)\n  completedTiles = completedTiles.concat(completedRowTiles)\n  score += completedRowTiles.length / 9\n  \n  // Check columns\n  const completedColumnTiles = completedColumns(board)\n  completedTiles = completedTiles.concat(completedColumnTiles)\n  score += completedColumnTiles.length / 9\n  \n  // Check boxes\n  const completedBoxTiles = completedBoxes(board)\n  completedTiles = completedTiles.concat(completedBoxTiles)\n  score += completedBoxTiles.length / 9\n\n  const newBoard = board.map(tile => {\n    if (includesCoords(completedTiles, tile.coordinates)) {\n      return { ...tile, active: false }\n    } else {\n      return tile\n    }\n  })\n\n  return [newBoard, score]\n}\n\nfunction completedRows(board: Array<BoardTile>): Array<[number, number]> {\n  let completedTiles = [] as Array<[number, number]>\n\n  for (let row = 0; row < 9; row++) {\n    let complete = true\n\n    for (let tile = 0; tile < 9; tile++) {\n      const coord = getIndexFromCoords([tile, row])\n\n      if (!board[coord].active) {\n        complete = false\n      }\n    }\n\n    if (complete) {\n      for (let completedTile = 0; completedTile < 9; completedTile++) {\n        completedTiles.push([completedTile, row])\n      }\n    }\n  }\n\n  return completedTiles\n}\n\nfunction completedColumns(board: Array<BoardTile>): Array<[number, number]> {\n  let completedTiles = [] as Array<[number, number]>\n\n  for (let col = 0; col < 9; col++) {\n    let complete = true\n\n    for (let tile = 0; tile < 9; tile++) {\n      const coord = getIndexFromCoords([col, tile])\n\n      if (!board[coord].active) {\n        complete = false\n      }\n    }\n\n    if (complete) {\n      for (let completedTile = 0; completedTile < 9; completedTile++) {\n        completedTiles.push([col, completedTile])\n      }\n    }\n  }\n\n  return completedTiles\n}\n\nfunction completedBoxes(board: Array<BoardTile>): Array<[number, number]> {\n  let completedTiles = [] as Array<[number, number]>\n\n  for (let x = 0; x < 3; x++) {\n    for (let y = 0; y < 3; y++) {\n      const boxCoordinates = getBoxCoordinates([x * 3, y * 3])\n      let complete = true\n\n      for (let i = 0; i < boxCoordinates.length; i++) {\n        if (!board[getIndexFromCoords(boxCoordinates[i])].active) {\n          complete = false\n        }\n      }\n\n      if (complete) {\n        for (let j = 0; j < boxCoordinates.length; j++) {\n          completedTiles.push(boxCoordinates[j])\n        }\n      }\n    }\n  }\n\n  return completedTiles\n}\n\nfunction getBoxCoordinates(topLeftCoordinate: [number, number]): Array<[number, number]> {\n  const coordinates = [] as Array<[number, number]>\n\n  for (let x = 0; x < 3; x++) {\n    for (let y = 0; y < 3; y++) {\n      coordinates.push([topLeftCoordinate[0] + x, topLeftCoordinate[1] + y])\n    }\n  }\n\n  return coordinates\n}\n\nexport function getCoordsFromIndex(index: number): [number, number] {\n  return [index % 9, Math.floor(index / 9)]\n}\n\nexport function getIndexFromCoords(coords: [number, number]): number {\n  return coords[1] * 9 + coords[0]\n}\n\nfunction includesCoords(arr: Array<[number, number]>, coord: [number, number]) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i][0] === coord[0] && arr[i][1] === coord[1]) {\n      return true\n    }\n  }\n\n  return false\n}","import './App.css';\nimport Board from './Board/Board';\nimport Bucket from './Bucket/Bucket';\nimport Header from './Header/Header';\nimport { closestCenter, DndContext, DragEndEvent, DragOverEvent } from '@dnd-kit/core'\nimport { useState } from 'react';\nimport { getRandomShapeTypes } from './Shape/shapes';\nimport { BoardTile, createNewBoard, highlightShape, getCoordsFromIndex, clearHighlights, shapeToTileCoordinates, placeShape, checkAndCompleteSets } from './Board/utils'\n\nfunction App() {\n  const [bucketShapes, setBucketShapes] = useState(getRandomShapeTypes(3))\n  const [board, setBoard] = useState<Array<BoardTile>>(createNewBoard(9, 9))\n  const [score, setScore] = useState<number>(0)\n\n  const onDragOver = (event: DragOverEvent) => {\n    // console.log('onDragOver', event)\n    const overId = event.over?.id\n\n    if (overId) {\n      const coords = getCoordsFromIndex(parseInt(overId))\n      const shapeCoordinates = shapeToTileCoordinates(board, coords, event.active.id)\n\n      let newBoard\n      if (shapeCoordinates) {\n        newBoard = highlightShape(board, shapeCoordinates)\n      } else {\n        newBoard = clearHighlights(board)\n      }\n      \n      setBoard(newBoard)\n    }\n\n  }\n\n  const onDragEnd = (event: DragEndEvent) => {\n    // console.log('onDragEnd', event)\n    const overId = event.over?.id\n    \n    if (overId) {\n      const coords = getCoordsFromIndex(parseInt(overId))\n      const shapeCoordinates = shapeToTileCoordinates(board, coords, event.active.id)\n      \n      if (shapeCoordinates) {\n        const clearedHighlights = clearHighlights(board)\n        const placedShape = placeShape(clearedHighlights, shapeCoordinates)\n        const [newBoard, addScore] = checkAndCompleteSets(placedShape)\n\n        setBoard(newBoard)\n        setScore(score + addScore)\n        removeShape(event.active.id)\n      }\n    }\n  }\n\n  const removeShape = (id: string) => {\n    const newShapes = bucketShapes.filter(s => s !== id)\n\n    if (newShapes.length > 0) {\n      setBucketShapes(newShapes)\n    } else {\n      setBucketShapes(getRandomShapeTypes(3))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <DndContext collisionDetection={closestCenter} onDragOver={onDragOver} onDragEnd={onDragEnd}>\n        <Header score={score} />\n        <Board board={board} />\n        <Bucket shapeTypes={bucketShapes} />\n      </DndContext>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}